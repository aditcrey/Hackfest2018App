package com.example.rakesh.detect;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.MenuItem;
import android.view.SurfaceView;
import android.view.WindowManager;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
import org.opencv.android.JavaCameraView;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class MainActivity extends AppCompatActivity implements CvCameraViewListener2 {

    // Used for logging success or failure messages
    private static final String TAG = "OCVSample::Activity";
    private static double mMinContourArea = 0.3;
    // These variables are used (at the moment) to fix camera orientation from 270degree to 0degree
    Mat mRgba;
    Mat mRgbaF;
    Mat mRgbaT;
    Scalar lowerThreshold = new Scalar(0, 48, 80); // skin color – lower hsv values
    Scalar upperThreshold = new Scalar(20, 255, 255); // skin color – higher hsv values
    org.opencv.core.Size s1 = new org.opencv.core.Size(11, 11);
    org.opencv.core.Size s2 = new org.opencv.core.Size(3, 3);
    org.opencv.core.Point p = new org.opencv.core.Point(-1, -1);
    MatOfPoint max_contour;
    MatOfPoint m;
    double temp_area;
    double[] diff = new double[6];
    List<MatOfPoint> contours0;
    double maxArea;
    Iterator<MatOfPoint> iterator;
    org.opencv.core.Rect rect;
    Mat sample0;
    double maxArea0 = 0;
    MatOfPoint max_contour0;
    Iterator<MatOfPoint> iterator0;
    Mat sample1;
    // Used in Camera selection from menu (when implemented)
    List<MatOfPoint> contours1;
    double maxArea1 = 0;
    MatOfPoint max_contour1;
    Mat sample2;
    Iterator<MatOfPoint> iterator1;
    List<MatOfPoint> contours2;
    double maxArea2 = 0;
    MatOfPoint max_contour2;
    Iterator<MatOfPoint> iterator2;
    // Pulkit SInghal
    private Mat mHsvMat;
    private Mat mMaskMat;
    private Mat mDilatedMat;
    private Mat hierarchy;
    private Mat temp;
    private MatOfInt hull;
    private Mat mask;
    private Mat result;
    private Scalar CONTOUR_COLOR;
    private int channelCount = 3;
    private int iLineThickness = 3;
    private List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
    private List<MatOfPoint> mContours = new ArrayList<MatOfPoint>();
    private List<MatOfPoint> mContours1 = new ArrayList<MatOfPoint>();
    private List<MatOfPoint> mMaxContours = new ArrayList<MatOfPoint>();
    private Scalar colorGreen = new Scalar(0, 255, 0);
    private Scalar colorRed = new Scalar(255, 0, 0);
    // Loads camera view of OpenCV for us to use. This lets us see using OpenCV
    private CameraBridgeViewBase mOpenCvCameraView;
    private boolean mIsJavaCamera = true;
    private MenuItem mItemSwitchCamera = null;


    Mat sample3;
    List<MatOfPoint> contours3;
    double maxArea3 = 0;
    MatOfPoint max_contour3;
    Mat sample4;
    Iterator<MatOfPoint> iterator3;
    List<MatOfPoint> contours4;
    double maxArea4 = 0;
    MatOfPoint max_contour4;
    Iterator<MatOfPoint> iterator4;
    Mat sample5;
    List<MatOfPoint> contours5;
    int index;
    double min;
    double maxArea5 = 0;
    MatOfPoint max_contour5;
    Iterator<MatOfPoint> iterator5;
    
    
    private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {
            switch (status) {
                case LoaderCallbackInterface.SUCCESS: {
                    Log.i(TAG, "OpenCV loaded successfully");
                    mOpenCvCameraView.enableView();

                    // Rakesh kumar suthar
                    mHsvMat = new Mat();
                    mMaskMat = new Mat();
                    mDilatedMat = new Mat();
                    hierarchy = new Mat();
                    temp = new Mat();
                    CONTOUR_COLOR = new Scalar(255, 0, 0, 255);
                    hull = new MatOfInt();
                    mask = new Mat();
                    max_contour = new MatOfPoint();
                    result = new Mat();
                    iterator0 = contours0.iterator();
                    max_contour0 = new MatOfPoint();
                    max_contour1 = new MatOfPoint();
                    max_contour2 = new MatOfPoint();
                    contours0 = new ArrayList<MatOfPoint>();
                    contours1 = new ArrayList<MatOfPoint>();
                    contours2 = new ArrayList<MatOfPoint>();
                    contours3 = new ArrayList<MatOfPoint>();
                    contours4 = new ArrayList<MatOfPoint>();
                    contours5 = new ArrayList<MatOfPoint>();
                    max_contour5 = new MatOfPoint();
                    max_contour4 = new MatOfPoint();
                    max_contour3 = new MatOfPoint();
                }
                break;
                default: {
                    super.onManagerConnected(status);
                }
                break;
            }
        }
    };

    public MainActivity() {
        Log.i(TAG, "Instantiated new " + this.getClass());
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Log.i(TAG, "called onCreate");
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        setContentView(R.layout.activity_main);

        mOpenCvCameraView = (JavaCameraView) findViewById(R.id.show_camera_activity_java_surface_view);

        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);

        mOpenCvCameraView.setCvCameraViewListener(this);
    }

    @Override
    public void onPause() {
        super.onPause();
        if (mOpenCvCameraView != null)
            mOpenCvCameraView.disableView();
    }

    @Override
    public void onResume() {
        super.onResume();
        if (!OpenCVLoader.initDebug()) {
            Log.d(TAG, "Internal OpenCV library not found. Using OpenCV Manager for initialization");
            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);
        } else {
            Log.d(TAG, "OpenCV library found inside package. Using it!");
            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
        }
    }

    public void onDestroy() {
        super.onDestroy();
        if (mOpenCvCameraView != null)
            mOpenCvCameraView.disableView();
    }

    public void onCameraViewStarted(int width, int height) {

        mRgba = new Mat(height, width, CvType.CV_8UC4);
        mRgbaF = new Mat(height, width, CvType.CV_8UC4);
        mRgbaT = new Mat(width, width, CvType.CV_8UC4);
    }

    public void onCameraViewStopped() {
        mRgba.release();
    }

    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {


        mDilatedMat.release();
        result.release();
        // TODO Auto-generated method stub
        mRgba = inputFrame.rgba();
        // Rotate mRgba 90 degrees
        Core.transpose(mRgba, mRgbaT);
        Imgproc.resize(mRgbaT, mRgbaF, mRgbaF.size(), 0, 0, 0);
        Core.flip(mRgbaF, mRgba, 1);

        Imgproc.cvtColor(mRgba, mHsvMat, Imgproc.COLOR_RGB2HSV);
        Core.inRange(mHsvMat, lowerThreshold, upperThreshold, mMaskMat);
        Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, s1, p);

        Imgproc.erode(mMaskMat, mMaskMat, new Mat());
        Imgproc.erode(mMaskMat, mMaskMat, new Mat());
        Imgproc.erode(mMaskMat, mMaskMat, new Mat());
        Imgproc.dilate(mMaskMat, mMaskMat, new Mat());
        Imgproc.dilate(mMaskMat, mMaskMat, new Mat());
        Imgproc.dilate(mMaskMat, mMaskMat, new Mat());
        Imgproc.GaussianBlur(mMaskMat, mMaskMat, s2, 1, 1);

        Core.bitwise_and(mRgba, mRgba, mDilatedMat, mMaskMat);

        // Black and White
        Imgproc.threshold(mDilatedMat, mDilatedMat, 20, 250, Imgproc.THRESH_BINARY);

        Imgproc.cvtColor(mDilatedMat, mDilatedMat, Imgproc.COLOR_RGB2GRAY);

        //final List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
        Imgproc.findContours(mDilatedMat, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        Imgproc.cvtColor(mDilatedMat, mDilatedMat, Imgproc.COLOR_GRAY2RGB);


        maxArea = 0;
        iterator = contours.iterator();

        while (iterator.hasNext()) {
            MatOfPoint contour = iterator.next();

            temp_area = Imgproc.contourArea(contour);
            if (temp_area > maxArea) {
                maxArea = temp_area;
                max_contour = contour;

            }
        }

        Imgproc.drawContours(mDilatedMat, contours, -1, colorGreen, iLineThickness);


        rect = Imgproc.boundingRect(max_contour);


        Imgproc.rectangle(mDilatedMat, rect.tl(), rect.br(), new Scalar(0, 255, 0), 3);
        mask = mDilatedMat.clone();
        m = new MatOfPoint(new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y),
                new Point(rect.x + rect.width, rect.y + rect.height), new Point(rect.x, rect.y + rect.height));


        Imgproc.fillConvexPoly(mask, m, new Scalar(0, 0, 255), Imgproc.LINE_8, 0);
        Core.inRange(mask, new Scalar(0, 0, 250), new Scalar(0, 0, 255), mask);
        Imgproc.threshold(mask, mask, 230, 255, Imgproc.THRESH_BINARY);
        temp = result.clone();
        Core.bitwise_and(mDilatedMat, mDilatedMat, temp, mask);
        result = temp.clone();

        Imgproc.cvtColor(result, result, Imgproc.COLOR_RGB2GRAY);
        Imgproc.threshold(result, result, 230, 255, Imgproc.THRESH_BINARY);


        //code for gesture 'OK'
        try {
            sample0 = Utils.loadResource(this, R.drawable.sample0);
        } catch (IOException ex) {

            //Do something with the exception
        }

        Imgproc.cvtColor(sample0, sample0, Imgproc.COLOR_RGB2GRAY);
        Imgproc.findContours(sample0, contours0, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);
        Imgproc.cvtColor(sample0, sample0, Imgproc.COLOR_GRAY2RGB);

        maxArea0 = 0;
        iterator0 = contours0.iterator();

        while (iterator0.hasNext()) {
            MatOfPoint contour0 = iterator0.next();

            double area0 = Imgproc.contourArea(contour0);
            if (area0 > maxArea0) {
                maxArea0 = area0;
                max_contour0 = contour0;

            }
        }

        diff[0] = Imgproc.matchShapes(max_contour, max_contour0, Imgproc.CONTOURS_MATCH_I2, 0.0);


        //code for gesture 'One'
        try {
            sample1 = Utils.loadResource(this, R.drawable.sample1);
        } catch (IOException ex) {
            //Do something with the exception
        }

        Imgproc.cvtColor(sample1, sample1, Imgproc.COLOR_RGB2GRAY);

        Imgproc.findContours(sample1, contours1, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        Imgproc.cvtColor(sample1, sample1, Imgproc.COLOR_GRAY2RGB);


        maxArea1 = 0;
        iterator1 = contours1.iterator();

        while (iterator1.hasNext()) {
            MatOfPoint contour1 = iterator1.next();

            double area1 = Imgproc.contourArea(contour1);
            if (area1 > maxArea1) {
                maxArea1 = area1;
                max_contour1 = contour1;

            }
        }

        diff[1] = Imgproc.matchShapes(max_contour, max_contour1, Imgproc.CONTOURS_MATCH_I2, 0.0);


        //code for gesture 'Two'
        try {
            sample2 = Utils.loadResource(this, R.drawable.sample2);
        } catch (IOException ex) {
            //Do something with the exception
        }

        Imgproc.cvtColor(sample2, sample2, Imgproc.COLOR_RGB2GRAY);

        Imgproc.findContours(sample2, contours2, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        Imgproc.cvtColor(sample2, sample2, Imgproc.COLOR_GRAY2RGB);


        maxArea2 = 0;
        iterator2 = contours2.iterator();

        while (iterator2.hasNext()) {
            MatOfPoint contour2 = iterator2.next();

            double area2 = Imgproc.contourArea(contour2);
            if (area2 > maxArea2) {
                maxArea2 = area2;
                max_contour2 = contour2;

            }
        }

        diff[2] = Imgproc.matchShapes(max_contour, max_contour2, Imgproc.CONTOURS_MATCH_I2, 0.0);


        //code for gesture 'Three'
        try {
            sample3 = Utils.loadResource(this, R.drawable.sample3);
        } catch (IOException ex) {
            //Do something with the exception
        }

        Imgproc.cvtColor(sample3, sample3, Imgproc.COLOR_RGB2GRAY);

        
        Imgproc.findContours(sample3, contours3, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        Imgproc.cvtColor(sample3, sample3, Imgproc.COLOR_GRAY2RGB);


        maxArea3 = 0;
        iterator3 = contours3.iterator();

        while (iterator3.hasNext()) {
            MatOfPoint contour3 = iterator3.next();

            double area3 = Imgproc.contourArea(contour3);
            if (area3 > maxArea3) {
                maxArea3 = area3;
                max_contour3 = contour3;

            }
        }

        diff[3] = Imgproc.matchShapes(max_contour, max_contour3, Imgproc.CONTOURS_MATCH_I2, 0.0);


        //code for gesture 'Four'
        try {
            sample4 = Utils.loadResource(this, R.drawable.sample4);
        } catch (IOException ex) {
            //Do something with the exception
        }

        Imgproc.cvtColor(sample4, sample4, Imgproc.COLOR_RGB2GRAY);

        
        Imgproc.findContours(sample4, contours4, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        Imgproc.cvtColor(sample4, sample4, Imgproc.COLOR_GRAY2RGB);


        maxArea4 = 0;
        iterator4 = contours4.iterator();

        while (iterator4.hasNext()) {
            MatOfPoint contour4 = iterator4.next();

            double area4 = Imgproc.contourArea(contour4);
            if (area4 > maxArea4) {
                maxArea4 = area4;
                max_contour4 = contour4;

            }
        }

        diff[4] = Imgproc.matchShapes(max_contour, max_contour4, Imgproc.CONTOURS_MATCH_I2, 0.0);


        //code for gesture 'Five'
        try {
            sample5 = Utils.loadResource(this, R.drawable.sample5);
        } catch (IOException ex) {
            //Do something with the exception
        }

        Imgproc.cvtColor(sample5, sample5, Imgproc.COLOR_RGB2GRAY);
        
        Imgproc.findContours(sample5, contours5, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        Imgproc.cvtColor(sample5, sample5, Imgproc.COLOR_GRAY2RGB);


        maxArea5 = 0;
        iterator5 = contours5.iterator();

        while (iterator5.hasNext()) {
            MatOfPoint contour5 = iterator5.next();

            double area5 = Imgproc.contourArea(contour5);
            if (area5 > maxArea5) {
                maxArea5 = area5;
                max_contour5 = contour5;

            }
        }

        diff[5] = Imgproc.matchShapes(max_contour, max_contour5, Imgproc.CONTOURS_MATCH_I2, 0.0);


        Imgproc.cvtColor(result, result, Imgproc.COLOR_GRAY2RGB);

        index = 10;
        min = 100;
        for (int i = 0; i < 6; i++) {
            if (diff[i] < min) {
                min = diff[i];
                index = i;
            }
        }

        if (diff[index] < 5) {

            org.opencv.core.Rect rect1 = Imgproc.boundingRect(max_contour);
            Imgproc.rectangle(result, rect1.tl(), rect1.br(), new Scalar(0, 255, 0), 3);
            // Adding Text
            if (index == 0)
                Imgproc.putText(result, "Gesture Detected : 'Nice/Good'", new Point(5, 50), Core.FONT_HERSHEY_SIMPLEX, 1.1, new Scalar(0, 255, 0), 3);
            else if (index == 1)
                Imgproc.putText(result, "Gesture Detected : 'One'", new Point(5, 50), Core.FONT_HERSHEY_SIMPLEX, 1.1, new Scalar(0, 255, 0), 3);
            else if (index == 2)
                Imgproc.putText(result, "Gesture Detected : 'Two'", new Point(5, 50), Core.FONT_HERSHEY_SIMPLEX, 1.1, new Scalar(0, 255, 0), 3);
            else if (index == 3)
                Imgproc.putText(result, "Gesture Detected : 'Three'", new Point(5, 50), Core.FONT_HERSHEY_SIMPLEX, 1.1, new Scalar(0, 255, 0), 3);
            else if (index == 4)
                Imgproc.putText(result, "Gesture Detected : 'Four'", new Point(5, 50), Core.FONT_HERSHEY_SIMPLEX, 1.1, new Scalar(0, 255, 0), 3);
            else if (index == 5)
                Imgproc.putText(result, "Gesture Detected : 'Five'", new Point(5, 50), Core.FONT_HERSHEY_SIMPLEX, 1.1, new Scalar(0, 255, 0), 3);

        } else {


            org.opencv.core.Rect rect1 = Imgproc.boundingRect(max_contour);
            Imgproc.rectangle(result, rect1.tl(), rect1.br(), new Scalar(255, 0, 0), 3);

        }


        return result; // This function must return
    }
}
